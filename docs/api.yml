openapi: 3.0.0
servers:
  - url: https://virtserver.swaggerhub.com/hei-ryan/PROG3_TD1/1.0.0
info:
  version: "latest"
  title: PROG3 - TD1
paths:
  /books:
    get:
      tags:
        - Books
      summary: get all books
      operationId: getBooks
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '500':
          description: Internal server error
    post:
      tags:
        - Books
      summary: create new books
      operationId: createBooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBook'
      responses:
        '200':
          description: List of created books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '500':
          description: Internal server error
    put:
      tags:
        - Books
      summary: update some books
      operationId: updateBooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBook'
      responses:
        '200':
          description: List of updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '500':
          description: Internal server error
  /books/{bookId}:
    delete:
      tags:
        - Books
      summary: delete a specific book
      operationId: deleteBook
      parameters:
        - in: path
          name: bookId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Return the deleted book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '500':
          description: Internal server error
  /categories:
    get:
      tags:
        - Categories
      summary: get all categories
      operationId: getCategories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error
    post:
      tags:
        - Categories
      summary: create new categories
      operationId: createCategories
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: List of created categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error
  /categories/{categoryId}:
    delete:
      tags:
        - Categories
      summary: delete a specific category
      operationId: deleteCategory
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Return the deleted category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error        
  /authors:
    get:
      tags:
        - Authors
      summary: get all authors
      operationId: getAuthors
      responses:
        '200':
          description: List of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '500':
          description: Internal server error
    post:
      tags:
        - Authors
      summary: create new authors
      operationId: createAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateAuthor'
      responses:
        '200':
          description: List of created authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '500':
          description: Internal server error
    put:
      tags:
        - Authors
      summary: update some authors
      operationId: updateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateAuthor'
      responses:
        '200':
          description: List of updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '500':
          description: Internal server error
  /authors/{authorId}:
    delete:
      tags:
        - Authors
      summary: delete a specific book
      operationId: deleteBook
      parameters:
        - in: path
          name: authorId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Return the deleted author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '500':
          description: Internal server error
components:
  schemas:
    Book:
      type: object
      properties:
        hasAuthor:
          type: boolean
      allOf:
        - $ref: '#/components/schemas/UpdateBook'
    UpdateBook:
      allOf:
        - $ref: '#/components/schemas/CreateBook'
      properties:
        id:
          type: integer
    CreateBook:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        #TODO-7-b: map the BookResponse to match to this appropriate resource
        # Then make all necessary changes for the cru(d) operations (GET, POST, PUT, (DELETE))
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    Author:
      type: object
      properties:
        hasParticularity:
          type: boolean
      allOf:
        - $ref: '#/components/schemas/UpdateAuthor'
    UpdateAuthor:
      allOf:
        - $ref: '#/components/schemas/CreateAuthor'
      properties:
        id:
          type: integer
    CreateAuthor:
      type: object
      properties:
        name:
          type: string
        particularity:
          type: string
    #TODO-7-a: create the appropriate model for category
    # Must know : a category can be used by some books and a book can have some categories
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string